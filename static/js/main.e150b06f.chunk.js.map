{"version":3,"sources":["components/ResultCard/styles.js","components/ResultCard/index.js","components/ResultCard/ResultCard.js","Pages/Home/Home.js","components/Loading/styles.js","components/Loading/index.js","components/Loading/Loading.js","Pages/Home/index.js","Pages/Home/HomeContainer.js","App.js","serviceWorker.js","index.js","resources/images/loading.gif"],"names":["styles","container","display","flex","justifyContent","margin","padding","victory","backgroundColor","defeat","summonerInfo","textAlign","summonerPic","borderRadius","height","width","player","participants","flexFlow","flexWrap","participantImg","ResultCard","_ref","summoner","matchStat","conatinerColor","summonerWin","containerStyles","Object","objectSpread","react_default","a","createElement","style","moment","startOf","revisionDate","fromNow","gameCreation","format","src","concat","profileIconId","alt","name","stats","summonerLevel","participantIdentities","map","participant","key","participantId","profileIcon","summonerName","Home","data","allMatchStats","match","components_ResultCard","gameId","alignContent","img","Loading","LoagingGif","HomeContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","e","res","wrap","_context","prev","next","preventDefault","setState","loading","fetch","state","sent","json","stop","_x","apply","arguments","_this2","_this$state","onSubmit","onChange","target","value","components_Loading","Pages_Home_Home","Component","App","className","Pages_Home","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e150b06f.chunk.js","sourcesContent":["const styles = {\n  container: {\n    display: 'flex',\n    flex: 1,\n    justifyContent: 'space-around',\n    margin: '5%',\n    padding: '2%'\n  },\n\n  victory: {\n    backgroundColor: 'aliceblue'\n  },\n\n  defeat: {\n    backgroundColor: '#ef9a9a'\n  },\n\n  summonerInfo: {\n    textAlign: 'left'\n  },\n\n  summonerPic: {\n    borderRadius: '50%',\n    height: '50px',\n    width: '50px'\n  },\n\n  player: {\n    textAlign: 'center',\n    justifyContent: 'flex-start'\n  },\n\n  participants: {\n    display: 'flex',\n    flexFlow: 'column',\n    flexWrap: 'wrap',\n    height: '250px',\n    textAlign: 'left'\n  },\n\n  participantImg: {\n    height: '20px',\n    width: '20px'\n  }\n}\n\nexport default styles\n","import ResultCard from './ResultCard'\nexport default ResultCard\n","import React from 'react'\nimport moment from 'moment'\nimport styles from './styles'\n\nconst ResultCard = ({ summoner, matchStat }) => {\n  const conatinerColor = matchStat.summonerWin ? styles.victory : styles.defeat\n  const containerStyles = { ...styles.container, ...conatinerColor }\n  return (\n    <div style={containerStyles}>\n      <div style={styles.player}>\n        <p>Ranked Solo</p>\n        <p>\n          {moment()\n            .startOf(summoner.revisionDate)\n            .fromNow()}\n        </p>\n        <p>{matchStat.summonerWin ? 'Victory' : 'Defeat'}</p>\n        <p>{moment(matchStat.gameCreation).format()}</p>\n      </div>\n      <div style={styles.summonerInfo}>\n        <img\n          style={styles.summonerPic}\n          src={`http://ddragon.leagueoflegends.com/cdn/9.7.1/img/profileicon/${\n            summoner.profileIconId\n          }.png`}\n          alt=\"Profile pic\"\n        />\n        <p>{summoner.name}</p>\n      </div>\n\n      <div style={styles.stats}>\n        <p>Level {summoner.summonerLevel}</p>\n      </div>\n      <div style={styles.participants}>\n        {matchStat.participantIdentities.map(participant => (\n          <div style={styles.participant} key={participant.participantId}>\n            <li>\n              <img\n                style={styles.participantImg}\n                src={`http://ddragon.leagueoflegends.com/cdn/6.3.1/img/profileicon/${\n                  participant.player.profileIcon\n                }.png`}\n                alt=\"participant pic\"\n              />\n              {participant.player.summonerName}\n            </li>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ResultCard\n","import React from 'react'\nimport ResultCard from '../../components/ResultCard'\n\nconst Home = ({ data }) => {\n  return (\n    data &&\n    data.allMatchStats.map(match => (\n      <ResultCard\n        key={match.gameId}\n        summoner={data.summoner}\n        matchStat={match}\n      />\n    ))\n  )\n}\n\nexport default Home\n","const styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignContent: 'center',\n    flex: 1\n  },\n\n  img: {\n    height: '5%',\n    width: '5%'\n  }\n}\nexport default styles\n","import Loading from './Loading'\nexport default Loading\n","import React from 'react'\nimport LoagingGif from '../../resources/images/loading.gif'\nimport styles from './styles'\n\nconst Loading = () => (\n  <div style={styles.container}>\n    <img src={LoagingGif} style={styles.img} alt=\"Loading\" />\n  </div>\n)\n\nexport default Loading\n","import Home from './HomeContainer'\nexport default Home\n","import React, { Component } from 'react'\nimport Home from './Home'\nimport Loading from '../../components/Loading'\n\nclass HomeContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      summonerName: null,\n      loading: false,\n      data: null\n    }\n  }\n\n  handleSubmit = async e => {\n    e.preventDefault()\n    this.setState({ loading: true })\n    const res = await fetch(\n      `https://nameless-thicket-73875.herokuapp.com/summoner/${\n        this.state.summonerName\n      }`\n    )\n    const stats = await res.json()\n    this.setState({ data: stats })\n    this.setState({ loading: false })\n  }\n\n  render() {\n    const { loading, data } = this.state\n    return (\n      <div>\n        <h1>League Stats</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            name=\"summonerName\"\n            onChange={e => {\n              this.setState({ summonerName: e.target.value })\n            }}\n          />\n        </form>\n\n        {loading ? <Loading /> : data && <Home data={data} />}\n      </div>\n    )\n  }\n}\n\nexport default HomeContainer\n","import React from 'react'\nimport './App.css'\nimport Home from './Pages/Home'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.fcd8d05c.gif\";"],"sourceRoot":""}